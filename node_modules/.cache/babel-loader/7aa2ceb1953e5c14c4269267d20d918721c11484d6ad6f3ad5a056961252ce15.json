{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nfunction parseColWidth(totalWidth) {\n  var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  if (typeof width === 'number') {\n    return width;\n  }\n  if (width.endsWith('%')) {\n    return totalWidth * parseFloat(width) / 100;\n  }\n  return null;\n}\n\n/**\r\n * Fill all column with width\r\n */\nexport default function useWidthColumns(flattenColumns, scrollWidth) {\n  return React.useMemo(function () {\n    // Fill width if needed\n    if (scrollWidth && scrollWidth > 0) {\n      var totalWidth = 0;\n      var missWidthCount = 0;\n\n      // collect not given width column\n      flattenColumns.forEach(function (col) {\n        var colWidth = parseColWidth(scrollWidth, col.width);\n        if (colWidth) {\n          totalWidth += colWidth;\n        } else {\n          missWidthCount += 1;\n        }\n      });\n\n      // Fill width\n      var restWidth = scrollWidth - totalWidth;\n      var restCount = missWidthCount;\n      var avgWidth = restWidth / missWidthCount;\n      var realTotal = 0;\n      var filledColumns = flattenColumns.map(function (col) {\n        var clone = _objectSpread({}, col);\n        var colWidth = parseColWidth(scrollWidth, clone.width);\n        if (colWidth) {\n          clone.width = colWidth;\n        } else {\n          var colAvgWidth = Math.floor(avgWidth);\n          clone.width = restCount === 1 ? restWidth : colAvgWidth;\n          restWidth -= colAvgWidth;\n          restCount -= 1;\n        }\n        realTotal += clone.width;\n        return clone;\n      });\n      return [filledColumns, realTotal];\n    }\n    return [flattenColumns, scrollWidth];\n  }, [flattenColumns, scrollWidth]);\n}","map":{"version":3,"names":["_objectSpread","React","parseColWidth","totalWidth","width","arguments","length","undefined","endsWith","parseFloat","useWidthColumns","flattenColumns","scrollWidth","useMemo","missWidthCount","forEach","col","colWidth","restWidth","restCount","avgWidth","realTotal","filledColumns","map","clone","colAvgWidth","Math","floor"],"sources":["C:/Users/jaimeen/fashin-buzz/FabFusion/node_modules/rc-table/es/hooks/useColumns/useWidthColumns.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\r\nimport * as React from 'react';\r\nfunction parseColWidth(totalWidth) {\r\n  var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\r\n  if (typeof width === 'number') {\r\n    return width;\r\n  }\r\n  if (width.endsWith('%')) {\r\n    return totalWidth * parseFloat(width) / 100;\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * Fill all column with width\r\n */\r\nexport default function useWidthColumns(flattenColumns, scrollWidth) {\r\n  return React.useMemo(function () {\r\n    // Fill width if needed\r\n    if (scrollWidth && scrollWidth > 0) {\r\n      var totalWidth = 0;\r\n      var missWidthCount = 0;\r\n\r\n      // collect not given width column\r\n      flattenColumns.forEach(function (col) {\r\n        var colWidth = parseColWidth(scrollWidth, col.width);\r\n        if (colWidth) {\r\n          totalWidth += colWidth;\r\n        } else {\r\n          missWidthCount += 1;\r\n        }\r\n      });\r\n\r\n      // Fill width\r\n      var restWidth = scrollWidth - totalWidth;\r\n      var restCount = missWidthCount;\r\n      var avgWidth = restWidth / missWidthCount;\r\n      var realTotal = 0;\r\n      var filledColumns = flattenColumns.map(function (col) {\r\n        var clone = _objectSpread({}, col);\r\n        var colWidth = parseColWidth(scrollWidth, clone.width);\r\n        if (colWidth) {\r\n          clone.width = colWidth;\r\n        } else {\r\n          var colAvgWidth = Math.floor(avgWidth);\r\n          clone.width = restCount === 1 ? restWidth : colAvgWidth;\r\n          restWidth -= colAvgWidth;\r\n          restCount -= 1;\r\n        }\r\n        realTotal += clone.width;\r\n        return clone;\r\n      });\r\n      return [filledColumns, realTotal];\r\n    }\r\n    return [flattenColumns, scrollWidth];\r\n  }, [flattenColumns, scrollWidth]);\r\n}"],"mappings":"AAAA,OAAOA,aAAa,MAAM,0CAA0C;AACpE,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,aAAaA,CAACC,UAAU,EAAE;EACjC,IAAIC,KAAK,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE;EAClF,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAOA,KAAK;EACd;EACA,IAAIA,KAAK,CAACI,QAAQ,CAAC,GAAG,CAAC,EAAE;IACvB,OAAOL,UAAU,GAAGM,UAAU,CAACL,KAAK,CAAC,GAAG,GAAG;EAC7C;EACA,OAAO,IAAI;AACb;;AAEA;AACA;AACA;AACA,eAAe,SAASM,eAAeA,CAACC,cAAc,EAAEC,WAAW,EAAE;EACnE,OAAOX,KAAK,CAACY,OAAO,CAAC,YAAY;IAC/B;IACA,IAAID,WAAW,IAAIA,WAAW,GAAG,CAAC,EAAE;MAClC,IAAIT,UAAU,GAAG,CAAC;MAClB,IAAIW,cAAc,GAAG,CAAC;;MAEtB;MACAH,cAAc,CAACI,OAAO,CAAC,UAAUC,GAAG,EAAE;QACpC,IAAIC,QAAQ,GAAGf,aAAa,CAACU,WAAW,EAAEI,GAAG,CAACZ,KAAK,CAAC;QACpD,IAAIa,QAAQ,EAAE;UACZd,UAAU,IAAIc,QAAQ;QACxB,CAAC,MAAM;UACLH,cAAc,IAAI,CAAC;QACrB;MACF,CAAC,CAAC;;MAEF;MACA,IAAII,SAAS,GAAGN,WAAW,GAAGT,UAAU;MACxC,IAAIgB,SAAS,GAAGL,cAAc;MAC9B,IAAIM,QAAQ,GAAGF,SAAS,GAAGJ,cAAc;MACzC,IAAIO,SAAS,GAAG,CAAC;MACjB,IAAIC,aAAa,GAAGX,cAAc,CAACY,GAAG,CAAC,UAAUP,GAAG,EAAE;QACpD,IAAIQ,KAAK,GAAGxB,aAAa,CAAC,CAAC,CAAC,EAAEgB,GAAG,CAAC;QAClC,IAAIC,QAAQ,GAAGf,aAAa,CAACU,WAAW,EAAEY,KAAK,CAACpB,KAAK,CAAC;QACtD,IAAIa,QAAQ,EAAE;UACZO,KAAK,CAACpB,KAAK,GAAGa,QAAQ;QACxB,CAAC,MAAM;UACL,IAAIQ,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACP,QAAQ,CAAC;UACtCI,KAAK,CAACpB,KAAK,GAAGe,SAAS,KAAK,CAAC,GAAGD,SAAS,GAAGO,WAAW;UACvDP,SAAS,IAAIO,WAAW;UACxBN,SAAS,IAAI,CAAC;QAChB;QACAE,SAAS,IAAIG,KAAK,CAACpB,KAAK;QACxB,OAAOoB,KAAK;MACd,CAAC,CAAC;MACF,OAAO,CAACF,aAAa,EAAED,SAAS,CAAC;IACnC;IACA,OAAO,CAACV,cAAc,EAAEC,WAAW,CAAC;EACtC,CAAC,EAAE,CAACD,cAAc,EAAEC,WAAW,CAAC,CAAC;AACnC"},"metadata":{},"sourceType":"module","externalDependencies":[]}